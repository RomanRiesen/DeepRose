function Field(x,y){this.x=x;this.y=y;this.owner="No Player";this.isCounted=false}
function Board(boardSize,crownColor,fieldColor,fieldBorderColor,backgroundColor){this.size=boardSize;this.borderPixels=window.LINEWIDTH*2;this.fields=[];this.remainingStones=Math.ceil(Math.pow(boardSize,2)/1.56);this.crownPosition={"x":Math.floor(this.size/2),"y":Math.floor(this.size/2)};this.lastCrownPosition=this.crownPosition;this.crownColor=crownColor;this.fieldColor=fieldColor;this.fieldBorderColor=fieldBorderColor;this.backgroundColor=backgroundColor;for(var x=0;x<this.size;x++){this.fields[x]=
new Array;for(var y=0;y<this.size;y++)this.fields[x][y]=new Field(x,y)}this.display=function(boardCtx,stonesCtx,player1,player2,deck,activePlayer){fillInBackground(boardCtx,this.backgroundColor);fillInBackground(stonesCtx,this.backgroundColor);fillInBackground(deck.deckCanvasCtx,this.backgroundColor);fillInBackground(player1.cardCanvasContext,this.backgroundColor);fillInBackground(player2.cardCanvasContext,this.backgroundColor);fillInBackground(player1.knightCanvasContext,this.backgroundColor);fillInBackground(player2.knightCanvasContext,
this.backgroundColor);fillInBackground(player1.pointsCanvasContext,this.backgroundColor);fillInBackground(player2.pointsCanvasContext,this.backgroundColor);this.stonesObj=this.calculateStoneGridSize(stonesCtx);for(var x=0;x<this.size;x++)for(var y=0;y<this.size;y++)this.displayAt(boardCtx,x,y,this.fields[x][y].owner);this.displayCrown(boardCtx);this.displayStones(stonesCtx,activePlayer);player1.displayHand(80);player2.displayHand(80);player1.displayPoints(board,deck);player2.displayPoints(board,deck);
deck.displayCardStack(activePlayer,player1.cardWidth,player1.cardHeight)};this.displayStones=function(stonesCtx,activePlayer,stroke){stroke=stroke===undefined?true:stroke;stonesCtx.fillStyle=activePlayer.color;var obj=this.stonesObj;var radius=10;var distance=30;var minD=2;stonesCtx.lineWidth=window.LINEWIDTH;var n=0;var hr=Math.floor(.5*radius)+1;var hh=Math.floor(stonesCtx.height/2);var hw=Math.floor(stonesCtx.width/2);for(var i=obj.r*2;i<obj.nx*obj.dx-obj.r;i+=obj.dx)for(var j=obj.r*2;j<obj.ny*
obj.dy-obj.r;j+=obj.dy)if(n<this.remainingStones){n++;stonesCtx.beginPath();stonesCtx.fillStyle=activePlayer.color;stonesCtx.arc(i,j,obj.r-minD,0,2*Math.PI);stonesCtx.fill();if(stroke){stonesCtx.beginPath();stonesCtx.strokeStyle=activePlayer.color2;stonesCtx.arc(i,j,obj.r-minD,0,2*Math.PI);stonesCtx.stroke()}}};this.calculateStoneGridSize=function(stonesCtx){var obj={"nx":0,"ny":0,"r":8,"dx":15,"dy":15};var hToW=stonesCtx.height/stonesCtx.width;while(obj.nx*obj.ny<=this.remainingStones){obj.nx++;
obj.ny=Math.ceil(obj.nx*hToW)}obj.nx++;obj.ny++;obj.r=Math.min(.5*(stonesCtx.width/obj.nx),.5*(stonesCtx.height/obj.ny));var d=obj.r*1;obj.dx=d;obj.dy=d;var restX=stonesCtx.width-obj.nx*d;var restY=stonesCtx.height-obj.ny*d;obj.dx+=restX/obj.nx;obj.dy+=restY/obj.ny;return obj};this.displayAt=function(ctx,x,y,player){ctx.strokeStyle=this.fieldBorderColor;ctx.lineWidth=window.LINEWIDTH;if(player!=="No Player"&&player!==undefined){ctx.fillStyle=player.color;ctx.strokeStyle=player.color2}else ctx.fillStyle=
this.fieldColor;ctx.beginPath();var fieldSize=ctx.width/this.size-this.borderPixels;var xs=ctx.width/this.size*x+this.borderPixels/2;var ys=ctx.height/this.size*y+this.borderPixels/2;ctx.rect(xs,ys,fieldSize,fieldSize);ctx.fill();ctx.stroke()};this.displayCrown=function(ctx){var fieldSize=ctx.width/this.size-this.borderPixels;var xs=ctx.width/this.size*(this.crownPosition.x+.5)+this.borderPixels/2-.5*this.borderPixels;var ys=ctx.height/this.size*(this.crownPosition.y+.5)+this.borderPixels/2-.5*this.borderPixels;
ctx.lineWidth=window.LINEWIDTH;ctx.fillStyle=this.crownColor;ctx.strokeStyle=this.crownColor;ctx.beginPath();ctx.arc(xs,ys,fieldSize/2-window.LINEWIDTH,0,2*Math.PI);ctx.fill()};this.setCrownPosition=function(ctx,x,y){this.crownPosition={"x":x,"y":y};this.displayCrown(ctx,x,y)};this.gameHasEnded=function(player1,player2,deck){if(this.remainingStones<=0)return true;player1Nac=0;player2Nac=0;for(var i=0;i<player1.maxCards;i++){if(player1.cards[i]=="NaC")return false;if(player2.cards[i]=="NaC")return false}if(player1.checkPossibleMoves(this,
deck)===player2.checkPossibleMoves(this,deck)==="noPossibleTurnLeft")return true;return false};this.copy=function(){var newBoard=new Board(this.boardSize,this.borderPixels,this.crownColor,this.fieldColor,this.backgroundColor);newBoard.fields=JSON.parse(JSON.stringify(this.fields));newBoard.remainingStones=this.remainingStones;newBoard.crownPosition=this.crownPosition;newBoard.size=this.size;return newBoard};this.extend=function(jsonString){var obj=JSON.parse(jsonString);for(var key in obj){this[key]=
obj[key];console.log("Set ",key," to ",obj[key])}}};

